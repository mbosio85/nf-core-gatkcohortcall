/*
 * -------------------------------------------------
 *  nf-core/gatkcohortcall Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
// Global default params, used in configs
params {

  // Workflow flags
  annotateTools = null // Only with --step annotate
  genome = 'GRCh37'
  genomes_base='/media/mbosio/DATA/resources/'
  input = null // No default input

  // Workflow settings
  outdir = './results'
  publishDirMode = 'copy' // Default PublishDirMode (same as other nf-core pipelines)
  sequencing_center = null // No sequencing center to be writen in BAM header in MapReads process

  // Optional files/directory

  // AWSBatch
  awsqueue = false
  awsregion = 'eu-west-1'

  // Custom config
  config_profile_contact = false
  config_profile_description = false
  config_profile_url = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"

  // Reference genomes
  igenomesIgnore = true
  igenomes_base = 's3://ngi-igenomes/igenomes/'

  // Default
  help = false
  hostnames = false
  monochrome_logs = false // Monochrome logs disabled
  multiqc_config = "${baseDir}/assets/multiqc_config.yaml" // Default multiqc config
  name = false // No default name
  tracedir = "${params.outdir}/pipeline_info"

  // email
  email = false // No default email
  maxMultiqcEmailFileSize = 25.MB
  plaintext_email = false // Plaintext email disabled

  // Base specifications
  cpus = 8 
  max_cpus = 8
  max_memory = 60.GB
  max_time = 240.h
  singleCPUMem = 7.GB

}
// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/gatkcohortcall:dev'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }
  test { includeConfig 'conf/test.config' }
}

// Avoid this error:
// WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
// Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351, once this is established and works well, nextflow might implement this behavior as new default.
docker.runOptions = '-u \$(id -u):\$(id -g)'

// Load igenomes.config if required
if (!params.igenomesIgnore) {
  includeConfig 'conf/igenomes.config'
}else {
  includeConfig 'conf/genomes.config'

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/gatkcohortcall'
  author = 'Mattia Bosio'
  homePage = 'https://github.com/nf-core/gatkcohortcall'
  description = 'GATK WGS variant calling for cohorts. Works also on single sample'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}



// Return the minimum between requirements and a maximum limit to ensure that resource requirements don't go over
def check_resource(obj) {
    try {
      if (obj.getClass() == nextflow.util.MemoryUnit && obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else if (obj.getClass() == nextflow.util.Duration && obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else if (obj.getClass() == java.lang.Integer)
        return Math.min(obj, params.max_cpus as int)
      else
        return obj
    } catch (all) {
        println "   ### ERROR ###   Max params max_memory:'${params.max_memory}', max_time:'${params.max_time}' or max_cpus:'${params.max_cpus}'  is not valid! Using default value: $obj"
    }
}

// Remember to update the tower id here once it's setup

tower {
  accessToken = '62565084dc2312821024225eb68d0ee4d5671139'
  enabled = true
}

